
task collectMainDexList {
    println sourceSets.asList()
    sourceSets.iterator().each {
        wEachClassWithInnerClassToFile('.', 'maindexlist', '.txt', it.allJava.files, 10)
    }
}

def wEachClassWithInnerClassToFile(
        def directory, def fileName, def extension, def javaFiles, def innerClassCount) {
    new File("$directory/$fileName$extension").withWriter { out ->
        javaFiles.iterator().each {
            String fullpath = it.canonicalPath
            // "java"字符串的长度 + 后面一个path字符的长度 = 5
            int packageStartIndex = fullpath.indexOf('java') + 5
            String reference = fullpath.substring(packageStartIndex).replace("java", "class")
            println "Class in $name: $reference"
            out.println reference
            //write inner class placeholder
            for (int i = 1; i < innerClassCount + 1; i++) {
                String innerClass = reference.replace('.', "\$$i.")
                out.println innerClass
            }
        }
    }
}

task configProguardDontShrink {
    setProguardFileWithConfig(new File("./proguard-rules.pro"),"-dontshrink")
    setProguardFileWithConfig(new File("../HostApp/proguard-rules.pro"),"-dontshrink")
}

def setProguardFileWithConfig(File proguardFile, String config) {
    boolean shouldAddConfig = true
    if (proguardFile.exists()) {
        proguardFile.eachLine {
            if (it.trim() == "$config") {
                shouldAddConfig = false
            }
        }

        if (shouldAddConfig) {
            proguardFile << "\n$config"
        }
    }

}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
    }
}

android {
    dexOptions {
        javaMaxHeapSize "4g"
        preDexLibraries = false

        additionalParameters += '--multi-dex'
        additionalParameters += '--main-dex-list=maindexlist.txt'
        additionalParameters += '--minimal-main-dex'
        additionalParameters += '--set-max-idx-number=20000'
    }


    applicationVariants.all { variant ->
        if (variant.name == "release") {
            // rename release apk name and copy to HostApp's assets
            variant.outputs.each { output ->
                def file = output.outputFile
                output.outputFile = new File(file.parent,
                        "plugin1.apk")
                copy {
                    from output.outputFile.absolutePath
                    into "../HostApp/src/main/assets"
                }
            }

            // generate mapping_pluginlibrary.txt to HostApp folder & config HostApp's Proguard File
            if (variant.mappingFile != null && variant.mappingFile.exists()) {
                generatePluginLibraryMappingFile(variant.mappingFile,"com.example.jianqiang.mypluginlibrary")
                setProguardFileWithConfig(new File("../HostApp/proguard-rules.pro"),"-applymapping mapping_pluginlibrary.txt")
            }
        }

    }

}


def generatePluginLibraryMappingFile(File pluginMappingFile, String packageName){
    def pluginLibMappingFile = file("../HostApp/mapping_pluginlibrary.txt")
    boolean isPluginLibrary
    pluginLibMappingFile.withWriter { out ->
        pluginMappingFile.eachLine {
            if (it.startsWith(' ')){
                if (isPluginLibrary){
                    out.println it
                }
            }else {
                isPluginLibrary = false
                if (it.startsWith(packageName)){
                    isPluginLibrary = true
                    out.println it
                }
            }
        }
    }
}

preBuild.doFirst{
    collectMainDexList.execute()
    configProguardDontShrink.execute()
}


